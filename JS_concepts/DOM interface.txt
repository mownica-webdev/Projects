properties provided by the DOM interface in JavaScript:

1.nodeName: Provides the name of the node, typically in uppercase for HTML elements. 
For example:
var element = document.getElementById("example");
var name = element.nodeName; // Returns the uppercase tag name (e.g., "DIV", "P", "A", etc.)

2.nodeType: 
Specifies the type of the node. It's represented by numerical values, where 1 corresponds to an Element node,
3 corresponds to a Text node, and so on. 
For example:
var element = document.getElementById("example");
var type = element.nodeType; // Returns the type of node (e.g., 1 for Element node)

3.childNodes: Provides a collection of child nodes of the current element, represented as a NodeList. 
For example:
var element = document.getElementById("example");
var children = element.childNodes; // Returns a NodeList containing child nodes

4. parentNode: Allows access to the parent node of the current element. 
For example:
var element = document.getElementById("example");
var parent = element.parentNode; // Returns the parent node of the element

5.classList: 
Provides access to the list of CSS classes applied to the element, allowing for manipulation of classes. 
For example:
var element = document.getElementById("example");
var classes = element.classList; // Returns a DOMTokenList containing the CSS classes

6.offsetWidth and offsetHeight: 
These properties provide the width and height of the element, including padding, border, and scrollbar if 
rendered. 
For example:
var element = document.getElementById("example");
var width = element.offsetWidth; // Returns the offset width of the element
var height = element.offsetHeight; // Returns the offset height of the element

These properties are just a subset of what the DOM interface provides. Understanding and utilizing these properties can significantly enhance your ability to manipulate and interact with HTML elements using JavaScript.

classList property
The classList property is an interface provided by DOM (Document Object Model) elements in JavaScript. 
It provides a convenient way to access and manipulate the CSS classes applied to an element.
The classList property returns a DOMTokenList object, which represents a set of space-separated tokens
(i.e., CSS class names) for the element.

The classList interface exposes several methods that allow you to add, remove, toggle, and check for the 
presence of CSS classes on the element. 

Here's a brief explanation of each method:

add("className"): Adds the specified CSS class to the element's class list.
javascript code:
element.classList.add("className");

remove("className"): Removes the specified CSS class from the element's class list.
javascript code:
element.classList.remove("className");

toggle("className"): Toggles the presence of the specified CSS class. If the class is present, it removes it; if it's absent, it adds it.

javascript code:
element.classList.toggle("className");
contains("className"): Checks whether the specified CSS class is present in the element's class list. Returns true if present, false otherwise.

javascript code:
if (element.classList.contains("className")) {
    // Class is present
}
The classList property simplifies the process of working with CSS classes compared to manually manipulating the className property, as it provides a more expressive and readable syntax for adding, removing, toggling, and checking classes. Additionally, it automatically handles whitespace and ensures that class manipulation is performed in a safe and efficient manner.


DOMTokenList object
-A DOMTokenList object is an interface provided by the DOM (Document Object Model) in JavaScript. 
-It represents a set of space-separated tokens, typically CSS class names, associated with an element. 
-The classList property of DOM elements returns a DOMTokenList object containing the classes applied to that 
 element.

Here are some key characteristics and methods of DOMTokenList:

1.Space-Separated Tokens:
-A DOMTokenList represents a collection of space-separated tokens, usually CSS class names, associated with
 an element. 
-These tokens are stored in a way that allows for easy manipulation and querying.

2.Methods for Manipulation:
add(token): Adds the specified token to the list.
remove(token): Removes the specified token from the list.
toggle(token [, force]): Toggles the presence of the specified token. If the token is present, it removes it; if it's absent, it adds it. The optional force parameter allows you to specify whether to force adding or removing the token.
contains(token): Checks if the specified token is present in the list.
item(index): Retrieves the token at the specified index in the list.
length: Returns the number of tokens in the list.

3.Read-Only Properties:
value: Returns a string containing all the tokens, separated by spaces. This property is read-only.

DOMTokenList objects provide a convenient and efficient way to manipulate CSS classes on elements without 
directly modifying the className property, which would require parsing and reconstructing the entire class 
attribute string. 
They are commonly used in JavaScript for dynamically changing the styling or behavior of elements based on 
user interactions or application state.



